/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package pdf;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.bouncycastle.asn1.DERObjectIdentifier;
import org.bouncycastle.asn1.cms.Attribute;
import org.bouncycastle.cert.X509CertificateHolder;
import org.bouncycastle.cms.CMSProcessable;
import org.bouncycastle.cms.CMSSignedData;
import org.bouncycastle.cms.CMSSignedDataGenerator;
import org.bouncycastle.cms.CMSTypedData;
import org.bouncycastle.cms.jcajce.JcaSimpleSignerInfoGeneratorBuilder;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.operator.ContentSigner;
import org.bouncycastle.operator.OperatorCreationException;
import org.bouncycastle.operator.jcajce.JcaContentSignerBuilder;
import org.bouncycastle.util.io.pem.PemObject;
import org.bouncycastle.util.io.pem.PemWriter;

import com.itextpdf.text.Document;
import com.itextpdf.text.Image;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.AcroFields;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfSignatureAppearance;
import com.itextpdf.text.pdf.PdfStamper;
import com.itextpdf.text.pdf.SerialNumberBC;

public class PdfUtil {

    public CMSSignedData signPdf(byte[] unSignedPdf, X509CertificateHolder certificate, String userName, Date date) throws OperatorCreationException, IOException {
        // Add BouncyCastle JCEProvider
        Security.addProvider(new BouncyCastleProvider());

        CMSTypedData cmsTypedData = new CMSTypedData(unSignedPdf);

        // Prepare the content to be signed with Tags
        PdfReader reader = new PdfReader(unSignedPdf);
        PdfSignatureAppearance appearance = PdfSignatureAppearance.certification(reader, null, null, true, "my signature");
        appearance.setLocation("Berlin");
        appearance.setReason("test");
        appearance.setSize(new Rectangle(100, 50));
        appearance.setLayer2Text("layer2");
        appearance.setLayer4Text("layer4");

        PdfStamper stamper = new PdfStamper(reader, appearance, '\0', true);

        PdfDocumentListener listener = new PdfDocumentListener(appearance);
        stamper.setShrinkToFit(true);
        stamper.setViewerPreferences(PdfWriter.DisplayDocTitle).setPageCompression(true).setPageCompressionMode(PdfCompressor.CMD_DEFAULT_COMPRESSOR);
        stamper.addViewerPreference(PdfWriter.PDFX_LABEL);

        CMSSignedDataGenerator gen = new CMSSignedDataGenerator();

        // Sign with certificate
        ContentSigner contentSigner = new JcaContentSignerBuilder("SHA512withRSA")
                .setProvider("BC")
                .build(certificate);

        gen.addSignerInfoGenerator(new JcaSimpleSignerInfoGeneratorBuilder()
                .setSignedAttributeGenerator(new AttributeTableGenerator())
                .setSignedAttributeGenerator(new PdfSignatureAttributeTableGenerator())
                .build(contentSigner, certificate));

        // Authenticate
        gen.addCertificates(new CMSProcessable(certificate.getEncoded()));

        // Create CMSSignedData
        CMSSignedData signedData = gen.generate(cmsTypedData, false);

        //Write signed pdf and return
        stamper.close();
        byte[] signedPdf = writeSignedDataToStream(signedData);

        return signedPdf;
    }

    private byte[] writeSignedDataToStream(CMSSignedData signedData) throws IOException {

        // Convert CMSSignedData to Stream and write to file
        try (ByteArrayOutputStream stream = new ByteArrayOutputStream()) {
            try (PemWriter pemWriter = new PemWriter(stream)) {
                pemWriter.writeObject(new PemObject(
                        "CERTIFICATE", signedData.getEncoded().content));
                pemWriter.flush();
                return stream.toByteArray();
            }
        }
    }

    public static class AttributeTableGenerator implements AttributeTableGenerator {

        @Override
        public AttributeTable getAttributes(Map parameters)
                throws OperatorCreationException {

            AttributeTableBuilder tableBuilder = new AttributeTableBuilder();

             UserIpAddress userIpAddress = (UserIpAddress) parameters.get("userIpAddress");
             tableBuilder.addAttribute(
                    new Attribute(new DERObjectIdentifier("1.2.3.4.5.6.3.16"),
                            new DERObjectIdentifier("1.2.3.4.5.6.7.8.9.10:".getBytes("UTF-8")));
            return tableBuilder.build();
        }
    }

    public static class UserIpAddress {

        private InetAddress address;
        private int port;

        public UserIpAddress(InetAddress address, int port) {
            this.address = address;
            this.port = port;
        }

        public InetAddress getAddress() {
            return address;
        }

        public void setAddress(InetAddress address) {
            this.address = address;
        }

        public int getPort() {
            return port;
        }

        public void setPort(int port) {
            this.port = port;
        }

        @Override
        public String toString() {
            return address + ":" + port;
        }
    }

    public static void main(String[] args) throws IOException {
        byte[] bytes = Files.readAllBytes(Paths.get("/path/to/unSignedPdf.pdf"));
        System.out.println("UnSignedPdf byteSize: " + bytes.length);

        X509CertificateHolder certificate = new X509CertificateHolder(); //fill certificate information
        UserIpAddress ipAddress = new UserIpAddress("IP_ADDRESS", 8080); //fill ipAddress and port information

        byte[] signedPdf = signPdf(bytes, certificate, "Jhon Doe", new Date(), ipAddress);
        System.out.println("SignedPdf byteSize: " + signedPdf.length);
    }
}